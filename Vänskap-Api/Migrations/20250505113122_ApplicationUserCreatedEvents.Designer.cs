// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Vänskap_Api.Data;

#nullable disable

namespace Vänskap_Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250505113122_ApplicationUserCreatedEvents")]
    partial class ApplicationUserCreatedEvents
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUserInterest", b =>
                {
                    b.Property<int>("InterestsId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InterestsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserInterests", (string)null);
                });

            modelBuilder.Entity("EventInterest", b =>
                {
                    b.Property<int>("EventsId")
                        .HasColumnType("int");

                    b.Property<int>("InterestsId")
                        .HasColumnType("int");

                    b.HasKey("EventsId", "InterestsId");

                    b.HasIndex("InterestsId");

                    b.ToTable("EventInterests", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Vänskap_Api.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Vänskap_Api.Models.Conversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("Vänskap_Api.Models.ConversationParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConversationId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("ConversationParticipants");
                });

            modelBuilder.Entity("Vänskap_Api.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AgeRangeMax")
                        .HasColumnType("int");

                    b.Property<int?>("AgeRangeMin")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Vänskap_Api.Models.EventParticipant", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("EventParticipants");
                });

            modelBuilder.Entity("Vänskap_Api.Models.FriendRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("FriendRequests");
                });

            modelBuilder.Entity("Vänskap_Api.Models.Friendship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FriendId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("FriendId");

                    b.HasIndex("UserId");

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("Vänskap_Api.Models.Interest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Interests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Matlagning"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Resor"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Fotografi"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Träning"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Löpning"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Vandring"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Cykling"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Simning"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Yoga"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Musik"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Dans"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Måla"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Teckna"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Skriva"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Läsa böcker"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Spela gitarr"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Spela piano"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Programmering"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Trädgårdsarbete"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Fiske"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Jakt"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Baka"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Mode"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Inredning"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Filmer"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Serier"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Podcast"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Bilar"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Motorcyklar"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Djur"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Hundar"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Katter"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Volontärarbete"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Aktier"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Investeringar"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Ekonomi"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Historia"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Psykologi"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Filosofi"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Astronomi"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Vetenskap"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Politik"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Miljöfrågor"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Debatt"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Självutveckling"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Meditation"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Mindfulness"
                        },
                        new
                        {
                            Id = 48,
                            Name = "Skidåkning"
                        },
                        new
                        {
                            Id = 49,
                            Name = "Snowboard"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Segling"
                        },
                        new
                        {
                            Id = 51,
                            Name = "Surfing"
                        },
                        new
                        {
                            Id = 52,
                            Name = "Golf"
                        },
                        new
                        {
                            Id = 53,
                            Name = "Fotboll"
                        },
                        new
                        {
                            Id = 54,
                            Name = "Basket"
                        },
                        new
                        {
                            Id = 55,
                            Name = "Tennis"
                        },
                        new
                        {
                            Id = 56,
                            Name = "Padel"
                        },
                        new
                        {
                            Id = 57,
                            Name = "Baseboll"
                        },
                        new
                        {
                            Id = 58,
                            Name = "Esport"
                        },
                        new
                        {
                            Id = 59,
                            Name = "Brädspel"
                        },
                        new
                        {
                            Id = 60,
                            Name = "Schack"
                        },
                        new
                        {
                            Id = 61,
                            Name = "Kortspel"
                        },
                        new
                        {
                            Id = 62,
                            Name = "Rollspel"
                        },
                        new
                        {
                            Id = 63,
                            Name = "Camping"
                        },
                        new
                        {
                            Id = 64,
                            Name = "Roadtrips"
                        },
                        new
                        {
                            Id = 65,
                            Name = "Backpacking"
                        },
                        new
                        {
                            Id = 66,
                            Name = "Språk"
                        },
                        new
                        {
                            Id = 67,
                            Name = "Kultur"
                        },
                        new
                        {
                            Id = 68,
                            Name = "Matkultur"
                        },
                        new
                        {
                            Id = 69,
                            Name = "Brygga öl"
                        },
                        new
                        {
                            Id = 70,
                            Name = "Vinprovning"
                        },
                        new
                        {
                            Id = 71,
                            Name = "Cocktails"
                        },
                        new
                        {
                            Id = 72,
                            Name = "Kaffe"
                        },
                        new
                        {
                            Id = 73,
                            Name = "Teknik"
                        },
                        new
                        {
                            Id = 74,
                            Name = "AI"
                        },
                        new
                        {
                            Id = 75,
                            Name = "Spelutveckling"
                        },
                        new
                        {
                            Id = 76,
                            Name = "Webbutveckling"
                        },
                        new
                        {
                            Id = 77,
                            Name = "Mobilappar"
                        },
                        new
                        {
                            Id = 78,
                            Name = "Entreprenörskap"
                        },
                        new
                        {
                            Id = 79,
                            Name = "Startups"
                        },
                        new
                        {
                            Id = 80,
                            Name = "Marknadsföring"
                        },
                        new
                        {
                            Id = 81,
                            Name = "Sociala medier"
                        },
                        new
                        {
                            Id = 82,
                            Name = "YouTube"
                        },
                        new
                        {
                            Id = 83,
                            Name = "Streaming"
                        },
                        new
                        {
                            Id = 84,
                            Name = "Standup"
                        },
                        new
                        {
                            Id = 85,
                            Name = "Improvisation"
                        },
                        new
                        {
                            Id = 86,
                            Name = "Skådespeleri"
                        },
                        new
                        {
                            Id = 87,
                            Name = "Teater"
                        },
                        new
                        {
                            Id = 88,
                            Name = "Konst"
                        },
                        new
                        {
                            Id = 89,
                            Name = "Museer"
                        },
                        new
                        {
                            Id = 90,
                            Name = "Arkitektur"
                        },
                        new
                        {
                            Id = 91,
                            Name = "Modefotografi"
                        },
                        new
                        {
                            Id = 92,
                            Name = "Vintage"
                        },
                        new
                        {
                            Id = 93,
                            Name = "Antikviteter"
                        },
                        new
                        {
                            Id = 94,
                            Name = "Loppis"
                        },
                        new
                        {
                            Id = 95,
                            Name = "Minimalism"
                        },
                        new
                        {
                            Id = 96,
                            Name = "Zero waste"
                        },
                        new
                        {
                            Id = 97,
                            Name = "DIY-projekt"
                        },
                        new
                        {
                            Id = 98,
                            Name = "Snickeri"
                        },
                        new
                        {
                            Id = 99,
                            Name = "Keramik"
                        },
                        new
                        {
                            Id = 100,
                            Name = "Origami"
                        });
                });

            modelBuilder.Entity("Vänskap_Api.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConversationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReadAts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("ApplicationUserInterest", b =>
                {
                    b.HasOne("Vänskap_Api.Models.Interest", null)
                        .WithMany()
                        .HasForeignKey("InterestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vänskap_Api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventInterest", b =>
                {
                    b.HasOne("Vänskap_Api.Models.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vänskap_Api.Models.Interest", null)
                        .WithMany()
                        .HasForeignKey("InterestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Vänskap_Api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Vänskap_Api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vänskap_Api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Vänskap_Api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Vänskap_Api.Models.ConversationParticipant", b =>
                {
                    b.HasOne("Vänskap_Api.Models.Conversation", "Conversation")
                        .WithMany("ConversationParticipants")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vänskap_Api.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Vänskap_Api.Models.Event", b =>
                {
                    b.HasOne("Vänskap_Api.Models.ApplicationUser", "CreatedByUser")
                        .WithMany("CreatedEvents")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("Vänskap_Api.Models.EventParticipant", b =>
                {
                    b.HasOne("Vänskap_Api.Models.Event", "Event")
                        .WithMany("EventParticipants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vänskap_Api.Models.ApplicationUser", "User")
                        .WithMany("EventParticipations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Vänskap_Api.Models.FriendRequest", b =>
                {
                    b.HasOne("Vänskap_Api.Models.ApplicationUser", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Vänskap_Api.Models.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Vänskap_Api.Models.Friendship", b =>
                {
                    b.HasOne("Vänskap_Api.Models.ApplicationUser", null)
                        .WithMany("Friendships")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Vänskap_Api.Models.ApplicationUser", "Friend")
                        .WithMany()
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Vänskap_Api.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Friend");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Vänskap_Api.Models.Message", b =>
                {
                    b.HasOne("Vänskap_Api.Models.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vänskap_Api.Models.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Vänskap_Api.Models.ApplicationUser", b =>
                {
                    b.Navigation("CreatedEvents");

                    b.Navigation("EventParticipations");

                    b.Navigation("Friendships");
                });

            modelBuilder.Entity("Vänskap_Api.Models.Conversation", b =>
                {
                    b.Navigation("ConversationParticipants");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Vänskap_Api.Models.Event", b =>
                {
                    b.Navigation("EventParticipants");
                });
#pragma warning restore 612, 618
        }
    }
}
